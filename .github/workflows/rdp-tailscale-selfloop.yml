name: RDP via Tailscale (Self-Loop, Win2025 + screenshots + handoff + Telegram)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: true
      ts_authkey:
        description: "Tailscale Auth key (reusable or ephemeral)"
        required: true
      test_mode:
        description: "Run short 10-minute test (instead of ~6h)"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"

jobs:
  rdp:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Tailscale
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi -OutFile ts.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/i ts.msi /quiet /norestart'
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey "${{ github.event.inputs.ts_authkey }}" --accept-dns=true

      - name: RDP session
        id: rdp
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Paths
          $startPng = Join-Path $env:RUNNER_TEMP "rdp-start.png"
          $endPng   = Join-Path $env:RUNNER_TEMP "rdp-end.png"

          # Assemblies
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing

          function Save-Screen([string]$Path) {
            $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
            $bmp    = New-Object System.Drawing.Bitmap($bounds.Width, $bounds.Height)
            $gfx    = [System.Drawing.Graphics]::FromImage($bmp)
            $gfx.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
            $bmp.Save($Path, [System.Drawing.Imaging.ImageFormat]::Png)
            $gfx.Dispose()
            $bmp.Dispose()
          }

          # Before session
          Save-Screen -Path $startPng

          # Runtime (short if test_mode true)
          $minutes = [int]${{ github.event.inputs.runtime_minutes }}
          if (${{ github.event.inputs.test_mode }}) { $minutes = 10 }
          if ($minutes -gt 355) { $minutes = 355 }
          Write-Host "⏳ Sleeping for $minutes minutes..."
          Start-Sleep -Seconds ($minutes * 60)

          # After session
          Save-Screen -Path $endPng

          # Outputs
          "start_png=$startPng" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "end_png=$endPng"     | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: rdp-screens
          path: |
            ${{ steps.rdp.outputs.start_png }}
            ${{ steps.rdp.outputs.end_png }}

      - name: Upload handoff JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-handoff
          path: ${{ runner.temp }}/handoff.json

      - name: Complete job
        run: echo "✅ RDP job complete"
